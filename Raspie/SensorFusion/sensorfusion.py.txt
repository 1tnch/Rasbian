#!/usr/bin/python

import smbus
import math
import threading
import time
import serial
from NS_DRdecoder import NSDRdecoder
import conversion

cos = math.cos
##
## MPU9255 decoder
##

bus = smbus.SMBus(1) # or bus = smbus.SMBus(1) for Revision 2 boards

def read_byte(reg, adr):
    return bus.read_byte_data(reg, adr)

def read_word(reg, adr):
    if reg == 0x0C:
        high = bus.read_byte_data(reg, adr+1)
        low = bus.read_byte_data(reg, adr)
    else:
        high = bus.read_byte_data(reg, adr)
        low = bus.read_byte_data(reg, adr+1)
    val = (high << 8) + low
    return val

def read_word_2c(reg, adr):
    val = read_word(reg, adr)
    if (val >= 0x8000):
        return -((65535 - val) + 1)
    else:
        return val

def dist(a,b):
    return math.sqrt((a*a)+(b*b))

def get_y_rotation(x,y,z):
    radians = math.atan2(x, dist(y,z))
    return -math.degrees(radians)

def get_x_rotation(x,y,z):
    radians = math.atan2(y, dist(x,z))
    return math.degrees(radians)

def cos(x):
    return math.cos(x)

def sin(x):
    return math.sin(x)

def tan(x):
    return math.tan(x)

def sqrt(x):
    return math.sqrt(x)    

def millis():
    return time.time() * 1000

def MPU_run():
    
    beta = 2.0
    SampleFreq = 100.0
    invSampleFreq = 1/SampleFreq
    r = 0.0
    p = 0.0
    y = 0.0
    Q0 = 1.0
    Q1 = 1.0
    Q2 = 1.0
    Q3 = 1.0
    DEG_to_RAD = 0.01745329252
    accelG = 9.80665
    gyro_xout = 0.0
    gyro_yout = 0.0
    gyro_zout = 0.0
    mag_xout = 0.0
    mag_yout = 0.0
    mag_zout = 0.0
    timerOld = 0.0
    timerNew = 0.0
    NorthAccel = 0.0
    EastAccel = 0.0
    DownAccel = 0.0

    #Kalman Variables
    X_North = [1.0,1.0]         #predicted North position and velocity
    P_North = [1.0, 1.0,
               1.0, 1.0]        #predicted error in North position and velocity
    K_North = [1.0,1.0,
               1.0, 1.0]        #Kalman gain North
    Q_North = [0.5,0.0,
               0.0, 0.5]        #North process noise covariance matrix
    R_North = [1.0,1.0,
               1.0, 1.0]        #North Sensor noise covariance matrix
    Y_North = [1.0,1.0]         #North Observation

    X_East = [1.0,1.0]          #predicted East position and velocity
    P_East = [1.0, 1.0,
               1.0, 1.0]        #predicted error in East position and velocity
    K_East = [1.0,1.0,
               1.0, 1.0]        #Kalman gain East
    Q_East = [0.5,0.0,
               0.0, 0.5]        #East process noise covariance matrix
    R_East = [1.0,1.0,
               1.0, 1.0]        #East Sensor noise covariance matrix
    Y_East = [1.0,1.0]           #East Observation

    # GPS Variable Input
    Northing = 1.0
    VelNorth = 1.0
    Easting = 1.0
    VelEast = 1.0
    ZoneLetter = ''
    ZoneNumber = 0
    
    f = open('workfile', 'w')
    MPU9250_ADDRESS = 0x68       # This is the address value read via the i2cdetect command
    MAG_ADDRESS = 0x0C

    # Now wake the 6050 up as it starts in sleep mode
    bus.write_byte_data(MPU9250_ADDRESS, 0x6B, 0)
    
    # Disable master I2C
    bus.write_byte_data(MPU9250_ADDRESS, 0x6A, 0)
    
    #Configure gyroscope range
    bus.write_byte_data(MPU9250_ADDRESS, 27, 0x18)
    #Configure accelerometers range
    bus.write_byte_data(MPU9250_ADDRESS, 28, 0x18)
    #Set by pass mode for the magnetometers
    bus.write_byte_data(MPU9250_ADDRESS, 55, 0x02)

    bus.write_byte_data(MAG_ADDRESS, 0x0A, 0x1F)    # set mag-16bit , ROM mode
    magasaX = bus.read_byte_data(MAG_ADDRESS, 0x10) # read mag_asax
    magasaY = bus.read_byte_data(MAG_ADDRESS, 0x11) # read mag_asay
    magasaZ = bus.read_byte_data(MAG_ADDRESS, 0x12) # read mag_asaz
    bus.write_byte_data(MAG_ADDRESS, 0x0A, 0x10)    # set mag-16bit ,  powerdown mode
    time.sleep(0.001)       # waiting

    bus.write_byte_data(MAG_ADDRESS, 0x0A, 0x16)    # set mag-16bit , mag-100hz
    timerOld = time.time()
    while True:
        gyro_xout = (-read_word_2c(MPU9250_ADDRESS, 0x43) * 2000.0) / 32768.0
        gyro_yout = (-read_word_2c(MPU9250_ADDRESS, 0x45) * 2000.0) / 32768.0
        gyro_zout = (read_word_2c(MPU9250_ADDRESS, 0x47) * 2000.0) / 32768.0
        accel_xout = (-read_word_2c(MPU9250_ADDRESS, 0x3b) * 16.0) / 32768.0
        accel_yout = (-read_word_2c(MPU9250_ADDRESS, 0x3d) * 16.0) / 32768.0
        accel_zout = (read_word_2c(MPU9250_ADDRESS, 0x3f) * 16.0) / 32768.0
        mag_xout = -(read_word_2c(MAG_ADDRESS, 0x03) * 4800.0) / 32768.0
        mag_yout = -(read_word_2c(MAG_ADDRESS, 0x05) * 4800.0) / 32768.0
        mag_zout = -(read_word_2c(MAG_ADDRESS, 0x07) * 4800.0) / 32768.0
        st = bus.read_byte_data(MAG_ADDRESS, 9)

        [r, p, y, Q0, Q1, Q2, Q3] = update(gyro_xout, gyro_yout, gyro_zout, accel_xout, accel_yout, accel_zout, mag_xout, mag_yout, mag_zout, Q0, Q1, Q2, Q3, invSampleFreq, beta)
##        print "%s\t%s\t%s\t%s" %(q0, q1, q2, q3)
##        print "%s\t%s\t%s" %(gyro_xout, gyro_yout, gyro_zout)
##        print "%s\t%s\t%s\t\t%s\t%s\t%s\t\t%s\t%s\t%s" %(accel_xout, accel_yout, accel_zout, gyro_xout, gyro_yout, gyro_zout, mag_xout, mag_yout, mag_zout)

        q = [Q0, Q1, Q2, Q3]
        a12 =   2.0 * (q[1] * q[2] + q[0] * q[3])
        a22 =   q[0] * q[0] + q[1] * q[1] - q[2] * q[2] - q[3] * q[3]
        a31 =   2.0 * (q[0] * q[1] + q[2] * q[3])
        a32 =   2.0 * (q[1] * q[3] - q[0] * q[2])
        a33 =   q[0] * q[0] - q[1] * q[1] - q[2] * q[2] + q[3] * q[3]

        gravity = [a31, a32, a33]

        pureXAcceleration = -1 * (accel_xout - gravity[1])
        pureYAcceleration = -1 * (accel_yout - gravity[0])
        pureZAcceleration = 1 * (accel_zout - gravity[2])

        
        tempAccel = [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0]
        #compute for NED
        #compute for accNorth
        tempAccel[0] = pureXAcceleration*cos(y*DEG_to_RAD)*cos(p*DEG_to_RAD)   #X-axis
        tempAccel[1] = pureYAcceleration*-sin(y*DEG_to_RAD)*cos(r*DEG_to_RAD)   #Y-axis
        tempAccel[2] = pureZAcceleration*sin(p*DEG_to_RAD)                       #Z-axis wala pay klaro
        #compute for accEast
        tempAccel[3] = pureXAcceleration*sin(y*DEG_to_RAD)*cos(p*DEG_to_RAD)   #X-axis
        tempAccel[4] = pureYAcceleration*cos(y*DEG_to_RAD)*cos(r*DEG_to_RAD)    #Y-axis
        tempAccel[5] = pureZAcceleration*sin(r*DEG_to_RAD)                        #Z-axis wala pay klaro
        #compute for accDown
        tempAccel[6] = pureXAcceleration*sin(p*DEG_to_RAD)                       #X-axis wala pay klaro
        tempAccel[7] = pureYAcceleration*-sin(r*DEG_to_RAD)                       #Y-axis wala pay klaro
        tempAccel[8] = pureZAcceleration*cos(p*DEG_to_RAD)*cos(r*DEG_to_RAD)  #Z-axis wala pay klaro

        accelMagnitudeNorth = 0.0
        accelMagnitudeEast = 0.0
        accelMagnitudeDown = 0.0
        
        #find magnitude
        if (tempAccel[0] < 0 or tempAccel[1] < 0):
          accelMagnitudeNorth = -sqrt(tempAccel[0]*tempAccel[0] + tempAccel[1]*tempAccel[1])
        
        else:
          accelMagnitudeNorth = sqrt(tempAccel[0]*tempAccel[0] + tempAccel[1]*tempAccel[1])
        
        if (tempAccel[3] < 0 or tempAccel[4] < 0):
          accelMagnitudeEast = sqrt(tempAccel[3]*tempAccel[3] + tempAccel[4]*tempAccel[4])
        
        else:
          accelMagnitudeEast = -sqrt(tempAccel[3]*tempAccel[3] + tempAccel[4]*tempAccel[4])
        
        if (tempAccel[6] < 0 or tempAccel[7] < 0):
          accelMagnitudeDown = -sqrt(tempAccel[6]*tempAccel[6] + tempAccel[7]*tempAccel[7])
        
        else:
          accelMagnitudeDown = sqrt(tempAccel[6]*tempAccel[6] + tempAccel[7]*tempAccel[7])
                
##        print "%s\t%s\t%s" %(accelMagnitudeNorth*accelG, accelMagnitudeEast*accelG, accelMagnitudeDown*accelG)

        # Low-pass filter
        NorthAccel = (0.945*NorthAccel + 0.0598*accelMagnitudeNorth)
        EastAccel = (0.945*EastAccel + 0.0598*accelMagnitudeEast)
        DownAccel = (0.945*DownAccel + 0.0598*accelMagnitudeDown)
        
##        print "%s\t%s\t%s" %(NorthAccel*accelG, EastAccel*accelG, DownAccel*accelG)

        # Start Kalman Filter
        # Compute for DeltaTime
        timerNew = time.time()
        DeltaTime = timerNew - timerOld
        freq = 1/((timerNew - timerOld))
        timerOld = timerNew
        lat = GPS.getLatitude()
        lon = GPS.getLongitude()
        speed = GPS.getSpeed()

##        f.write(str(lat) + ',' + str(lon) + ',')
        [Easting, Northing, ZoneNumber, ZoneLetter] = conversion.from_latlon(lat, lon)
        
        # Kalman Update for North
        # Predict new State
        X_North = PredictState(X_North, NorthAccel, DeltaTime)
        # Predict process noise
        P_North = PredictProcess(P_North, Q_North, DeltaTime)
        # Compute Kalman Gain
        K_North = kGain(P_North, R_North)
        # Input observations
        Y_North = [Northing, VelNorth]
        # Calculate/update current state
        X_North = CurrentState(X_North, K_North, Y_North)
        # Calculate/update the Process Covariance Matrix
        P_North = CurrentProcess(K_North, P_North)

        # Kalman Update for East
        # Predict new State
        X_East = PredictState(X_East, EastAccel, DeltaTime)
        # Predict process noise
        P_East = PredictProcess(P_East, Q_East, DeltaTime)
        # Compute Kalman Gain
        K_East = kGain(P_East, R_East)
        # Input observations
        Y_East = [Easting, VelEast]
        # Calculate/update current state
        X_East = CurrentState(X_East, K_East, Y_East)
        # Calculate/update the Process Covariance Matrix
        P_East = CurrentProcess(K_East, P_East)

        [lat, lon] = conversion.to_latlon(Easting, Northing, ZoneNumber, ZoneLetter)
        f.write(str(lat) + ',' + str(lon) + '\n')
##        print "%s\t%s\t%s\t%s\t%s\t%s" %(Northing, Easting, X_North[0], X_East[0], K_North[0], K_East[0])
        
        

##  code should end here
#################################################################################

##
## Kalman defines
##

def PredictState(x, u, delT):
    return [(x[0] + delT*x[1]) + ((u/2)*delT*delT) , x[1] + (u*delT)]

def PredictProcess(P, Q, delT):
    A = [1+(delT*delT) , delT, delT , 1]
    return [P[0]*A[0] + P[1]*A[2] + Q[0], P[0]*A[1] + P[1]*A[3] + Q[1],
            P[2]*A[0] + P[3]*A[2] + Q[2], P[2]*A[1] + P[3]*A[3] + Q[3]]

def kGain(P, R):
    num = [P[0] , 0   ,
           0    , P[3]]
    den = [P[0]+R[0] , 0        ,
           0         , P[3]+R[3]]
    return [num[0]/den[0] , 0        ,
           0         , num[2 ]/den[3]]
def CurrentState(X, K, Y):
    return [X[0]+(K[0]*(Y[0]-X[0])) , X[1]+(K[3]*(Y[1]-X[1]))]

def CurrentProcess(K, P):
    return [(1-K[0])*P[0], 0 , 0 , (1-K[3])*P[3]]
        

##
## Madgwick AHRS Filter
##
        
def update(gx,  gy,  gz,  ax,  ay,  az,  mx,  my,  mz, q0, q1, q2, q3, invSampleFreq, beta):

    # Convert gyroscope degrees/sec to radians/sec
    gx *= 0.0174533
    gy *= 0.0174533
    gz *= 0.0174533

    # Rate of change of quaternion from gyroscope
    qDot1 = 0.5 * (-q1 * gx - q2 * gy - q3 * gz)
    qDot2 = 0.5 * (q0 * gx + q2 * gz - q3 * gy)
    qDot3 = 0.5 * (q0 * gy - q1 * gz + q3 * gx)
    qDot4 = 0.5 * (q0 * gz + q1 * gy - q2 * gx)

    # Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
    if (not((ax == 0.0) and (ay == 0.0) and (az == 0.0))):
        # Normalise accelerometer measurement
        recipNorm = invSqrt(ax * ax + ay * ay + az * az)
        ax *= recipNorm
        ay *= recipNorm
        az *= recipNorm

        # Normalise magnetometer measurement
        recipNorm = invSqrt(mx * mx + my * my + mz * mz)
        mx *= recipNorm
        my *= recipNorm
        mz *= recipNorm

        # Auxiliary variables to avoid repeated arithmetic
        _2q0mx = 2.0 * q0 * mx
        _2q0my = 2.0 * q0 * my
        _2q0mz = 2.0 * q0 * mz
        _2q1mx = 2.0 * q1 * mx
        _2q0 = 2.0 * q0
        _2q1 = 2.0 * q1
        _2q2 = 2.0 * q2
        _2q3 = 2.0 * q3
        _2q0q2 = 2.0 * q0 * q2
        _2q2q3 = 2.0 * q2 * q3
        q0q0 = q0 * q0
        q0q1 = q0 * q1
        q0q2 = q0 * q2
        q0q3 = q0 * q3
        q1q1 = q1 * q1
        q1q2 = q1 * q2
        q1q3 = q1 * q3
        q2q2 = q2 * q2
        q2q3 = q2 * q3
        q3q3 = q3 * q3

        # Reference direction of Earth's magnetic field
        hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2 + _2q1 * mz * q3 - mx * q2q2 - mx * q3q3
        hy = _2q0mx * q3 + my * q0q0 - _2q0mz * q1 + _2q1mx * q2 - my * q1q1 + my * q2q2 + _2q2 * mz * q3 - my * q3q3
        _2bx = (hx * hx + hy * hy) ** 0.5
        _2bz = -_2q0mx * q2 + _2q0my * q1 + mz * q0q0 + _2q1mx * q3 - mz * q1q1 + _2q2 * my * q3 - mz * q2q2 + mz * q3q3
        _4bx = 2.0 * _2bx
        _4bz = 2.0 * _2bz

        # Gradient decent algorithm corrective step
        s0 = -_2q2 * (2.0 * q1q3 - _2q0q2 - ax) + _2q1 * (2.0 * q0q1 + _2q2q3 - ay) - _2bz * q2 * (_2bx * (0.5 - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q3 + _2bz * q1) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q2 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5 - q1q1 - q2q2) - mz)
        s1 = _2q3 * (2.0 * q1q3 - _2q0q2 - ax) + _2q0 * (2.0 * q0q1 + _2q2q3 - ay) - 4.0 * q1 * (1 - 2.0 * q1q1 - 2.0 * q2q2 - az) + _2bz * q3 * (_2bx * (0.5 - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q2 + _2bz * q0) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q3 - _4bz * q1) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5 - q1q1 - q2q2) - mz)
        s2 = -_2q0 * (2.0 * q1q3 - _2q0q2 - ax) + _2q3 * (2.0 * q0q1 + _2q2q3 - ay) - 4.0 * q2 * (1 - 2.0 * q1q1 - 2.0 * q2q2 - az) + (-_4bx * q2 - _2bz * q0) * (_2bx * (0.5 - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q1 + _2bz * q3) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q0 - _4bz * q2) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5 - q1q1 - q2q2) - mz)
        s3 = _2q1 * (2.0 * q1q3 - _2q0q2 - ax) + _2q2 * (2.0 * q0q1 + _2q2q3 - ay) + (-_4bx * q3 + _2bz * q1) * (_2bx * (0.5 - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q0 + _2bz * q2) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q1 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5 - q1q1 - q2q2) - mz)
        recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3) # normalise step magnitude
        s0 *= recipNorm
        s1 *= recipNorm
        s2 *= recipNorm
        s3 *= recipNorm

        # Apply feedback step
        qDot1 -= beta * s0
        qDot2 -= beta * s1
        qDot3 -= beta * s2
        qDot4 -= beta * s3

    # Integrate rate of change of quaternion to yield quaternion
    q0 += qDot1 * invSampleFreq
    q1 += qDot2 * invSampleFreq
    q2 += qDot3 * invSampleFreq
    q3 += qDot4 * invSampleFreq

    
    # Normalise quaternion
    recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3)
    q0 = q0 * recipNorm
    q1 = q1 * recipNorm
    q2 = q2 * recipNorm
    q3 = q3 * recipNorm

##    print "%s\t%s\t%s\t%s" %(q0, q1, q2, q3)
    
    roll = math.atan2(q0*q1 + q2*q3, 0.5 - q1*q1 - q2*q2)
    pitch = math.asin(-2.0 * (q1*q3 - q0*q2))
    yaw = math.atan2(q1*q2 + q0*q3, 0.5 - q2*q2 - q3*q3)
    
    roll *= 57.29578
    pitch *= 57.29578
    yaw *= 57.29578

    return [roll, pitch, yaw, q0, q1, q2, q3]


def invSqrt(x):
    if x == 0.0:
        return x
    else:
        return x ** -0.5

##
## Main
##

# Create new threads
GPS = NSDRdecoder("/dev/ttyS0")
GPS.setDaemon(True)
# Start new Threads
GPS.start()
try:
    MPU_run()
except KeyboardInterrupt:
    print "Goodbye World"