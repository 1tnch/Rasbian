import threading
import time
import serial

exitFlag = 0

class NSDRdecoder (threading.Thread):
    def __init__(self, port):
        threading.Thread.__init__(self)
        self.port = port
        self.hour = 0
        self.min = 0
        self.sec = 0
        self.msec = 0
        self.day = 0
        self.month = 0
        self.year = 0
        self.lat = 0.0
        self.dirLat = "N"
        self.lon = 0.0
        self.dirLon = "E"
        self.alt = 0.0
        self.sat = 0
        self.HDOP = 0.0
        self.speed = 0.0

    def run(self):
        port = self.port
        ser = serial.Serial(port, baudrate = 9600, timeout = 0.5)
        while True:
            data = ser.readline()
            self.parseGPS(data)
    def parseGPS(self, data):
##        print "raw:", data
        if data[0:6] == "$GNGGA":
            s = data.split(",")
            if s[7] == '0':
                print "no satellite data available"
                return        
            self.hour = int(s[1][0:2])
            self.min = int(s[1][2:4])
            self.sec = int(s[1][4:6])
            self.msec = int(s[1][7:10])
            self.lat = self.decode(s[2])
            self.dirLat = s[3]
            self.lon = self.decode(s[4])
            self.dirLon = s[5]
            self.alt = float(s[9])
            self.sat = int(s[7])
            self.HDOP = float(s[8])

        if data[0:6] == "$GNRMC":
            s = data.split(",")
            if s[7] == '0':
                print "no satellite data available"
                return
            self.hour = int(s[1][0:2])
            self.min = int(s[1][2:4])
            self.sec = int(s[1][4:6])
            self.msec = int(s[1][7:10])
            self.lat = self.decode(s[3])
            self.dirLat = s[4]
            self.lon = self.decode(s[5])
            self.dirLon = s[6]
            self.speed = float(s[7])
            self.day = int(s[9][0:2])
            self.month = int(s[9][2:4])
            self.year = int(s[9][4:6])
      
    def decode(self, coord):
        v = coord.split(".")
        head = v[0]
        tail =  float(v[1])
        deg = float(head[0:-2])
        min = head[-2:]
        _min = float(min)
        _min = _min/100
        tail = tail/1000000
        min = ((_min + tail)/60)*100
        ret = deg+min
        return ret

    def getHour(self):
        return self.hour

    def getMinutes(self):
        return self.min

    def getSeconds(self):
        return self.sec

    def getMSeconds(self):
        return self.msec

    def getDay(self):
        return self.day

    def getMonth(self):
        return self.month

    def getYear(self):
        return self.year

    def getLatitude(self):
        return self.lat

    def getDirLat(self):
        return self.dirLat

    def getLongitude(self):
        return self.lon

    def getDirLon(self):
        return self.dirLon

    def getAltitude(self):
        return self.alt

    def getSatellites(self):
        return self.sat

    def getHDOP(self):
        return self.HDOP

    def getSpeed(self):
        return self.speed       

#///
#class end here
#///